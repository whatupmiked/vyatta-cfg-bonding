#!/usr/bin/python3
""" Python3 module for collecting and displaying Vyatta vRouter
LACP state information
"""
import json
import subprocess
import os
import datetime
import argparse
from vplaned import Controller
from vyatta import configd

__year__    = "2020"
__version__ = "1.0"

__LACP_HDR__ = "E = Expired, F = Defaulted, D = Distributing, " + \
               "C = Collecting, S = Synchonization\n" + \
               "G = Aggregating, A = Active, P = Passive," + \
               "s = Short Timeout, L = Long Timeout"

class GenericJsonEncoder(json.JSONEncoder):
    """
    A generic Json Encoder
    """
    def default(self, obj):
        return obj.__dict__

class Interface:
    '''A generic class for a dataplane Interface'''
    def __init__(self, ifconfig):
        self.name = set_iface(ifconfig, "name")
        self.ether = set_iface(ifconfig, "ether")
        self.mtu = set_iface(ifconfig, "mtu")
        self.up = set_iface(ifconfig, "up")
        self.speed = set_iface(ifconfig, "speed")
        self.age = get_kernel(self.name, "opstate_age")
        self.duplex = set_iface(ifconfig, "duplex")
        self.rx_packets = set_iface(ifconfig, "rx_packets")
        self.rx_errors = set_iface(ifconfig, "rx_errors")
        self.rx_dropped = set_iface(ifconfig, "rx_dropped")
        self.tx_packets = set_iface(ifconfig, "tx_packets")
        self.tx_errors = set_iface(ifconfig, "tx_errors")
        self.tx_dropped = set_iface(ifconfig, "tx_dropped")

    def __repr__(self):
        return "{}".format(*[self.name, self.ether, self.mtu, self.up, \
                             self.speed, self.age, self.duplex, \
                             self.rx_packets, self.rx_errors, \
                             self.rx_dropped, self.tx_packets, \
                             self.tx_errors, self.tx_dropped])

class Lag(Interface):
    '''An LACP Master Interface Object'''
    def __init__(self, ifconfigs, lag):
        '''
        Takes as initializor a dictionary of dataplane
        ifconfigs containing ifname as the key as well
        as the dataplane lag dictionary
        '''
        # dp vars
        Interface.__init__(self, ifconfigs[lag["ifname"]])
        self.mode = lag["mode"]
        self.lacp = lag["lacp"]
        self.hash_alg = lag["hash"]
        # team vars
        team_config = teamdctl_caller(lag["ifname"], ["config", "dump"])
        team_state = teamdctl_caller(lag["ifname"], ["state", "dump"])
        self.active = team_state["runner"]["active"]
        self.team_mode = team_state["setup"]["kernel_team_mode_name"]
        self.controller = team_config["runner"]["controller"]
        if "fast_rate" in team_config["runner"]:
            self.fast_rate = team_config["runner"]["fast_rate"]
        else:
            self.fast_rate = False
        self.link_watch = team_config["link_watch"]["name"]
        self.tx_hash = team_config["runner"]["tx_hash"]
        self.sys_prio = team_state["runner"]["sys_prio"]
        if "ports" in team_state:
            self.slaves = [LagPort(ifconfigs[x["ifname"]], x, self.name, \
                                team_state["ports"][x["ifname"]]) \
                                for x in lag["slaves"]]
        else:
            self.slaves = [LagPort(ifconfigs[x["ifname"]], x, self.name, "") \
                                for x in lag["slaves"]]

    def team_state_print(self):
        '''Print the Lag Teamd State'''
        state = "{: <16} System Priority: ".format("")
        state += "{: <5} MAC: {: <18}\n".format(self.sys_prio, self.ether)
        state += "{: <16} Mode: {} Active: {: <5} ".format("", self.mode, \
                                                        str(self.active))
        print(state, '\n')
        print(__LACP_HDR__, '\n')
        for slave in self.slaves:
            slave.team_state_print()

    def team_cfg_print(self):
        '''Print the Lag Teamd Config'''
        if self.fast_rate:
            timeout = "Fast (1s)"
        else:
            timeout = "Slow (30s)"
        cfg = "{: <16} Timeout: {: <11} ".format(self.name, timeout)
        cfg += "Hash: {} ({})".format(self.team_mode, \
                                        ", ".join(self.tx_hash))
        print(cfg)

    def ctrl_state_print(self):
        '''Print the Lag Dataplane Controller State'''
        ctrl = "{: <16} Mode: {: <12} ".format(self.name, self.mode)
        ctrl += "LACP: {: <5} Hash: {: <27}".format(str(self.active), \
                                                   self.hash_alg)
        print(ctrl)
        print("-"*(16+12+5+27))
        for slave in self.slaves:
            slave.ctrl_state_print()
        print()

    def stats_print(self):
        '''Print the Lag stats'''
        for slave in self.slaves:
            slave.stats_print()

class LagPort(Interface):
    '''An LACP Slave Port Object'''
    # This class represents the full port state
    def __init__(self, ifconfig, lag, master, team):
        # dp vars
        Interface.__init__(self, ifconfig)
        self.dp_active = lag['active']
        self.dp_primary = lag['primary']
        self.dp_master = master
        self.version = 1
        if "802-3ad" in lag:
            dp_lag = lag["802-3ad"][0]
            self.dp_lacp = True
            self.dp_actor_state = lacp_state(dp_lag["actor-state"])
            self.dp_partner_state = lacp_state(dp_lag["partner-state"])
        else:
            self.dp_lacp = False
        # team vars
        if isinstance(team, dict):
            actor = team["runner"]["actor_lacpdu_info"]
            partner = team["runner"]["partner_lacpdu_info"]
            self.prio = team["runner"]["prio"]
            self.actor_sys_prio = actor["system_priority"]
            self.actor_sys_id = actor["system"]
            self.actor_key = actor["key"]
            self.actor_port_prio = actor["port_priority"]
            self.actor_port_id = actor["port"]
            self.actor_state = lacp_state(actor["state"])
            self.partner_sys_prio = partner["system_priority"]
            self.partner_sys_id = partner["system"]
            self.partner_key = partner["key"]
            self.partner_port_prio = partner["port_priority"]
            self.partner_port_id = partner["port"]
            self.partner_state = lacp_state(partner["state"])
        else:
            self.prio = "NA"
            self.actor_sys_prio = "NA"
            self.actor_sys_id = "NA"
            self.actor_key = "NA"
            self.actor_port_prio = "NA"
            self.actor_port_id = "NA"
            self.actor_state = "NA"
            self.partner_sys_prio = "NA"
            self.partner_sys_id = "NA"
            self.partner_key = "NA"
            self.partner_port_prio = "NA"
            self.partner_port_id = "NA"
            self.partner_state = "NA"

    def ctrl_state_print(self):
        '''Print the LagPort dataplane controller state'''
        state = "{: <2} {: <16} ".format("", self.name)
        state += "{: <16} ".format("Active: " + str(self.dp_active))
        if self.dp_lacp:
            state += "Actor: {} Partner: {} ".format(self.dp_actor_state, \
                                                    self.dp_partner_state)
        if self.dp_primary:
            state += "Primary"
        print(state)

    def team_state_print(self):
        '''Print the team LagPort state'''
        hdr = ["Interface", "Speed/Duplex", "MAC", "Link", "Port-prio"]
        a_hdr = ["actor-id", "prio", "key", "state"]
        p_hdr = ["partner-id", "prio", "key", "state"]
        state = [str(self.name), str(self.speed) + "/" + str(self.duplex), \
                 str(self.ether), str(self.up), str(self.prio)]
        a_state = [str(self.actor_sys_id), str(self.actor_sys_prio), \
                   str(self.actor_key), str(self.actor_state)]
        p_state = [str(self.partner_sys_id), str(self.partner_sys_prio), \
                   str(self.partner_key), str(self.partner_state)]
        print("{: <16} {: <16} {: <18} {: <5} {: <9}".format(*hdr))
        print("-"*(16+16+18+5+9))
        print("{: <16} {: <16} {: <18} {: <5} {: <9}".format(*state))
        print()
        print("{: <16} {: <18} {: <8} {: <8} {: <8}".format("", *a_hdr))
        print("{: <16} {}".format("", "-"*(18+8+8+8)))
        print("{: <16} {: <18} {: <8} {: <8} {: <8}".format("", *a_state))
        print()
        print("{: <16} {: <18} {: <8} {: <8} {: <8}".format("", *p_hdr))
        print("{: <16} {}".format("", "-"*(18+8+8+8)))
        print("{: <16} {: <18} {: <8} {: <8} {: <8}".format("", *p_state))
        print()

    def stats_print(self):
        '''Print the LagPort statistics'''
        if self.up:
            link = "Up"
        else:
            link = "Down"
        state = "{: <16} ".format(self.name)
        state += "{: <4} {}/{} Last Change: {}\n".format(link, \
                                                         self.speed, \
                                                         self.duplex, self.age)
        state += "{: <16} Master: {: <16} ".format("", self.dp_master)
        state += "Actor: {: <10} Partner: {: <10}".format(self.actor_state, \
                                                          self.partner_state)
        rx_stats = "{: <16} {: <10}".format("", "RX")
        rx_stats += " {: <16} {: <16} {: <16}".format(self.rx_packets,
                                                      self.rx_errors,
                                                      self.rx_dropped)
        tx_stats = "{: <16} {: <10}".format("", "TX")
        tx_stats += " {: <16} {: <16} {: <16}".format(self.tx_packets,
                                                      self.tx_errors,
                                                      self.tx_dropped)
        print(state)
        print("{: <16} {: <10} {: <16} {: <16} {: <16}".format("", "", \
                                                               "Pkts", \
                                                               "Errors", \
                                                               "Drops"))
        print(rx_stats)
        print(tx_stats)

def lag_printer(lag, cmd):
    '''
    The printing function for the json recieved from configd
    '''
    if cmd == 'detail':
        #team_cfg_print
        print("Control plane {}".format(lag['name']))
        print("="*79)
        if 'fast_rate' in lag:
            timeout = "Fast (1s)"
        else:
            timeout = "Slow (30s)"
        cfg = "{: <16} Timeout: {: <11} ".format(lag['name'], timeout)
        cfg += "Hash: {} ({})".format(lag['team_mode'], \
                                        ", ".join(lag['tx_hash']))
        print(cfg)
        ### team_state_print
        state = "{: <16} System Priority: ".format("")
        state += "{: <5} MAC: {: <18}\n".format(lag['sys_prio'], lag['ether'])
        state += "{: <16} Mode: {} Active: {: <5} ".format("", lag['mode'], \
                                                        str(lag['active']))
        print(state, '\n')
        print(__LACP_HDR__, '\n')
        for port in lag['slaves']:
            hdr = ["Interface", "Speed/Duplex", "MAC", "Link", "Port-prio"]
            a_hdr = ["actor-id", "prio", "key", "state"]
            p_hdr = ["partner-id", "prio", "key", "state"]
            state = [str(port['name']), str(port['speed']) + "/" + str(port['duplex']), \
                     str(port['ether']), str(port['up']), str(port['prio'])]
            a_state = [str(port['actor_sys_id']), str(port['actor_sys_prio']), \
                       str(port['actor_key']), str(port['actor_state'])]
            p_state = [str(port['partner_sys_id']), str(port['partner_sys_prio']), \
                       str(port['partner_key']), str(port['partner_state'])]
            print("{: <16} {: <16} {: <18} {: <5} {: <9}".format(*hdr))
            print("-"*(16+16+18+5+9))
            print("{: <16} {: <16} {: <18} {: <5} {: <9}".format(*state))
            print()
            print("{: <16} {: <18} {: <8} {: <8} {: <8}".format("", *a_hdr))
            print("{: <16} {}".format("", "-"*(18+8+8+8)))
            print("{: <16} {: <18} {: <8} {: <8} {: <8}".format("", *a_state))
            print()
            print("{: <16} {: <18} {: <8} {: <8} {: <8}".format("", *p_hdr))
            print("{: <16} {}".format("", "-"*(18+8+8+8)))
            print("{: <16} {: <18} {: <8} {: <8} {: <8}".format("", *p_state))
            print()
        #ctrl_state_print
        ctrl = "{: <16} Mode: {: <12} ".format(lag['name'], lag['mode'])
        ctrl += "LACP: {: <5} Hash: {: <27}".format(str(lag['active']), \
                                                   lag['hash_alg'])
        print(ctrl)
        print("-"*(16+12+5+27))
        for port in lag['slaves']:
            state = "{: <2} {: <16} ".format("", port['name'])
            state += "{: <16} ".format("Active: " + str(port['dp_active']))
            if 'dp_lacp' in port:
                state += "Actor: {} Partner: {} ".format(port['dp_actor_state'], \
                                                        port['dp_partner_state'])
            if port['dp_primary']:
                state += "Primary"
            print(state)
        print()
    if cmd == 'statistics':
        print(__LACP_HDR__)
        print("="*79)
        for port in lag['slaves']:
            if 'up' in port:
                link = "Up"
            else:
                link = "Down"
            state = "{: <16} ".format(port['name'])
            state += "{: <4} {}/{} Last Change: {}\n".format(link, \
                                                             port['speed'], \
                                                             port['duplex'], port['age'])
            state += "{: <16} Master: {: <16} ".format("", port['dp_master'])
            state += "Actor: {: <10} Partner: {: <10}".format(port['actor_state'], \
                                                              port['partner_state'])
            rx_stats = "{: <16} {: <10}".format("", "RX")
            rx_stats += " {: <16} {: <16} {: <16}".format(port['rx_packets'],
                                                          port['rx_errors'],
                                                          port['rx_dropped'])
            tx_stats = "{: <16} {: <10}".format("", "TX")
            tx_stats += " {: <16} {: <16} {: <16}".format(port['tx_packets'],
                                                          port['tx_errors'],
                                                          port['tx_dropped'])
            print(state)
            print("{: <16} {: <10} {: <16} {: <16} {: <16}".format("", "", \
                                                                   "Pkts", \
                                                                   "Errors", \
                                                                   "Drops"))
            print(rx_stats)
            print(tx_stats)

def set_iface(ifconfig, var):
    '''
    Set the interface variable from either the dataplane
    or from the kernel depending on what is available
    '''
    use_kernel = True
    name = ifconfig
    if isinstance(ifconfig, dict):
        use_kernel = False
        name = ifconfig['name']
    if not use_kernel:
        # Dataplane interface information available trust it
        if var in ifconfig:
            if_attr = ifconfig[var]
        elif var in ifconfig['link']:
            if_attr = ifconfig['link'][var]
        elif var in ifconfig['statistics']:
            if_attr = ifconfig['statistics'][var]
        else:
            use_kernel = True
    if use_kernel:
        if_attr = get_kernel(name, var)
    return if_attr

def lacp_state(state):
    '''
    Given an integer return the 802.3ad
    Port state as a string where the abbreviations
    conform to __LACP_HDR__ values
    '''
    port_state = list("********")
    if state & 128:
        port_state[0] = "E"
    if state & 64:
        port_state[1] = "F"
    if state & 32:
        port_state[2] = "D"
    if state & 16:
        port_state[3] = "C"
    if state & 8:
        port_state[4] = "S"
    if state & 4:
        port_state[5] = "G"
    if state & 2:
        port_state[6] = "s"
    else:
        port_state[6] = "L"
    if state & 1:
        port_state[7] = "A"
    else:
        port_state[7] = "P"
    if state > 255:
        port_state = "INVALID"
    return ''.join(port_state)

def get_kernel(intf, val):
    '''
    Get the interface value from the kernel
    and return as a string
    '''
    sys_path = "/sys/class/net/"+intf+"/"
    valid_if = False
    if os.path.exists(sys_path): valid_if = True
    if valid_if:
        if val in os.listdir(sys_path):
            sys_path += val
        elif val in os.listdir(sys_path+"statistics/"):
            sys_path += "statistics/" + val
        try:
            with open(sys_path, 'r') as k:
                kval = k.read().strip()
            if val == 'opstate_age':
                last_change = datetime.datetime.now() - \
                              datetime.timedelta(seconds=float(kval))
                kval = last_change.strftime("%A, %B %d, %Y %I:%M:%S").strip()
        except OSError:
            if val in ('speed', 'duplex'):
                kval = "auto"
            else:
                kval = "NA"
    else:
        kval = "NA"
    return kval

def teamdctl_caller(intf, cmd):
    '''
    Call teamdctl with the commandline arguements passed
    and return the json output
    '''
    teamdctl = subprocess.run(["/usr/bin/teamdctl", intf, *cmd], \
                            check=True, stdout=subprocess.PIPE, \
                            universal_newlines=True).stdout
    return json.loads(teamdctl)

def main():
    '''
    Parse input args and either run show lacp
    details or show lacp statistics
    '''
    parser = argparse.ArgumentParser(description="LACP Show")
    parser.add_argument("-d", "--detail", help="Show LACP details", \
            action="store_true")
    parser.add_argument("-s", "--stats", help="Show LACP statistics", \
            action="store_true")
    parser.add_argument("-j", "--json", action="store_true", default=False)
    parser.add_argument("-c", "--configd", action="store_true", default=False)
    args = parser.parse_args()
    # Form a dictionary comprehension of the dataplane
    # ifconfig where lag['ifname'] is the key and use this
    # to pass to class constructors for Lag class
    dp_lags = []
    dp_ifaces = []
    # Get dataplane state from controller
    with Controller() as controller:
        for dplane in controller.get_dataplanes():
            with dplane:
                dp_lags.append(dplane.json_command("lag"))
    with Controller() as controller:
        for dplane in controller.get_dataplanes():
            with dplane:
                dp_ifaces.append(dplane.json_command("ifconfig"))
    dp_ifcfgs = []
    # Construct key-based ifconfig
    for dp in dp_ifaces:
        dp_ifcfgs.append({i["name"] : i for i in dp["interfaces"]})
    lags = []
    # Populate list of Lag type for system
    for i, dp_slt in enumerate(dp_lags):
        for lag in dp_slt["lag"]:
            ifcfgs = {}
            master_name = lag["ifname"]
            ifcfgs[master_name] = dp_ifcfgs[i][master_name]
            for slave in lag["slaves"]:
                slave_name = slave["ifname"]
                if slave_name in dp_ifcfgs[i]:
                    ifcfgs[slave_name] = dp_ifcfgs[i][slave_name]
                else:
                    ifcfgs[slave_name] = slave_name
            lags.append(Lag(ifcfgs, lag))

    if args.json:
        print(json.dumps({'lags' : lags}, cls=GenericJsonEncoder))
        return
    if args.configd:
        client = configd.Client()
        tree = client.tree_get_full_dict('interfaces lacp-lags-state lags')
        if args.detail:
            for lag in tree['lags']:
                lag_printer(lag, 'detail')
        if args.stats:
            for lag in tree['lags']:
                lag_printer(lag, 'statistics')
        return

    # show-lacp-detail
    if args.detail:
        for lag in lags:
            print("Control plane {}".format(lag.name))
            print("="*79)
            lag.team_cfg_print()
            lag.team_state_print()
            print("Dataplane {}".format(lag.name))
            print("="*79)
            lag.ctrl_state_print()
    # show-lacp-statistics
    if args.stats:
        print(__LACP_HDR__)
        print("="*79)
        for lag in lags:
            lag.stats_print()

if __name__ == "__main__":
    main()
